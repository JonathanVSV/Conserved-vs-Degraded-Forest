setwd(C:/Users/JonathanVSV/Documents/GitHub/Conserved-vs-Degraded-Forest/Scripts)
setwd(C:Users/JonathanVSV/Documents/GitHub/Conserved-vs-Degraded-Forest/Scripts)
setwd(C:/Usuarios/JonathanVSV/Documents/GitHub/Conserved-vs-Degraded-Forest/Scripts)
setwd("C:/Users/JonathanVSV/Documents/GitHub/Conserved-vs-Degraded-Forest/Scripts")
library(tidyverse)
library(caret)
df <- read.csv("plots_data.csv", stringsAsFactors = T)
library(tidyverse)
library(caret)
df <- read.csv("plots_data.csv", stringsAsFactors = T)
## Change data form wide to long format
df_long <- df %>%
# Indicate column names to use
select(Plot, Forest_type,Canopy_cover, BA, Mean_height, biomasa_mg.ha, Mean_height, Density_branches, Density_trees) %>%
# Prepare data: long format. Indicate which columns are going into long format
pivot_longer(cols = c(Canopy_cover, BA, Mean_height, biomasa_mg.ha, Mean_height, Density_branches, Density_trees),
names_to = "Attribute",
values_to = "value")
df <- read.csv("plots_data.csv", stringsAsFactors = T)
## Change data form wide to long format
df_long <- df %>%
# Indicate column names to use
select(Plot, Forest_type,Canopy_cover, BA, Mean_height, BA, Mean_height, Density_branches, Density_trees) %>%
# Prepare data: long format. Indicate which columns are going into long format
pivot_longer(cols = c(Canopy_cover, BA, Mean_height, BA, Mean_height, Density_branches, Density_trees),
names_to = "Attribute",
values_to = "value")
## Define nesting function
## Taken from: https://github.com/tidyverse/tidyr/issues/769#issuecomment-537624093
func_nest <- function(df, vars_to_nest, new_col) {
nest(df, !!new_col := {{ vars_to_nest }})
}
df_long %>%
# Remove columns that are not going to be used
select(-Plot) %>%
# Use func_nest to nest the data for each attribute
func_nest(-Attribute, "data_nest") %>%
# Get the glm fit, and get the fitted values
mutate(fit = map(data_nest, ~ glm(.$Forest_type ~ .$value, family = "binomial")$fitted.values),
fitted_vals = map(fit, function(x) as.data.frame(x)),
real_vals = map(data_nest, function(x) as.data.frame(x$Forest_type))) %>%
# unnest fitted and real values
unnest(c(fitted_vals,real_vals)) %>%
# Rename unnested columnes
rename("fitted_vals2" = "x", "true" = "x$Forest_type") %>%
# Transfrom binomial probs into factor levels
mutate(fitted = ifelse(fitted_vals2 > 0.5, "degraded", "conserved")) %>%
# Eliminate columns that we are not going to use
select(c(-data_nest, -fit, -fitted_vals2)) %>%
# Set columns as factors
mutate_at(vars(fitted, true), function(x) as.factor(x)) %>%
# Nesta data
func_nest(-Attribute, "data_nest_fit") %>%
# Calculate confusion matrix accuracy
mutate(acc = unlist(map(data_nest_fit, ~ confusionMatrix(.$true,.$fitted)$overall[1]*100)))
library(tidyverse)
library(cowplot)
library(plotrix)
# Read data -------------------
df <- read.csv("plots_data.csv")
# Transform data into long format and calculate mean and se by Forest_type and Attribute
df <- df %>%
# Select columns that are going to be used
select(Plot, Forest_type,Canopy_cover, BA, Mean_height, AGB) %>%
# Change data into long format
pivot_longer(cols = c(Canopy_cover, BA, Mean_height, AGB),
names_to = "Attribute",
values_to = "value")
## First plot
p1 <- df  %>%
# Filter data just to stay with basal area data
filter(Attribute == "BA") %>%
# Do ggplot
ggplot(aes(x = Forest_type,
y = value)) +
# Add boxplot
geom_boxplot(fill = "gray90", width = 0.6) +
# Add threshold line
geom_hline(yintercept = 9.45, col = "red", lty = "longdash")+
# Add text for the threshold's value
geom_text(aes(x = 1.5, y = 10.3, label = "9.45")) +
# Change the x and y axis titles
labs(x = "Forest type", y = expression(bold("Basal"~"area"~"("*"m"^2*"/"*"ha"*")"))) +
# Change x axis levels
scale_x_discrete(labels = c("Conserved\nforest","Degraded\nforest")) +
# Change y axis breaks and limits
scale_y_continuous(breaks = seq(0,25,5),
limits = c(0,25),
expand = c(0,0)) +
# Add cowplot theme
theme_cowplot() +
# Remove x axis title and set the axis titles as bold face
theme(axis.title = element_text(face = "bold"),
axis.title.x = element_blank())
p1
## Second plot
p2 <- df  %>%
filter(Attribute == "AGB") %>%
ggplot(aes(x = Forest_type,
y = value)) +
geom_boxplot(fill = "gray90", width = 0.6) +
geom_hline(yintercept = 27.5, col = "red", lty = "longdash")+
geom_text(aes(x = 1.5, y = 29.5, label = "27.5"))+
labs(x = "Forest type", y = "Biomass (Mg/ha)") +
scale_x_discrete(labels = c("Conserved\nforest","Degraded\nforest")) +
scale_y_continuous(breaks = seq(0,70,10),
limits = c(0,70),
expand = c(0,0)) +
theme_cowplot()+
theme(axis.title = element_text(face = "bold"),
axis.title.x = element_blank())
p2
## Third plot
p3 <- df  %>%
filter(Attribute == "Canopy_cover") %>%
ggplot(aes(x = Forest_type,
y = value)) +
geom_boxplot(fill = "gray90", width = 0.6) +
geom_hline(yintercept = 90.9, col = "red", lty = "longdash")+
geom_text(aes(x = 1.5, y = 94.5, label = "90.9"))+
labs(x = "Forest type", y = "Canopy cover (%)") +
scale_x_discrete(labels = c("Conserved\nforest","Degraded\nforest")) +
scale_y_continuous(breaks = seq(0,100,25),
limits = c(0,100),
expand = c(0,0)) +
theme_cowplot()+
theme(axis.title = element_text(face = "bold"),
axis.title.x = element_blank())
p3
## Fourth plot
p4 <- df  %>%
filter(Attribute == "Mean_height") %>%
ggplot(aes(x = Forest_type,
y = value)) +
geom_boxplot(fill = "gray90", width = 0.6) +
geom_hline(yintercept = 5.30, col = "red", lty = "longdash")+
geom_text(aes(x = 1.5, y = 5.60, label = "5.30"))+
labs(x = "Forest type", y = "Mean height (m)") +
scale_x_discrete(labels = c("Conserved\nforest","Degraded\nforest")) +
scale_y_continuous(breaks = seq(0,8,2),
limits = c(0,8),
expand = c(0,0)) +
theme_cowplot()+
theme(axis.title = element_text(face = "bold"),
axis.title.x = element_blank())
p4
## Join 4 plots in grid with horizontal and vertical align
p_final <- plot_grid(p1,
p2,
p3,
p4,
labels = paste0("(",letters[1:4],")"),
align = "hv",
label_size = 18,
label_x = 0,
label_y = 0,
hjust = -0.5,
vjust = -2)
p_final
# Read data-------------------------------------------
df <- read.csv("plots_data.csv")
# Conserved and Degraded forest plots (all together)-----------------------
## Get variables to perform correlation
df_all <- as.matrix(df[,c("Canopy_cover","BA","AGB","Density_branches","Density_trees", "Mean_height")])
## Get correlation matrix
cor(df_all, method = "kendall")
library(corrplot)
# Conserved and Degraded forest plots (all together)-----------------------
## Get variables to perform correlation
df_all <- as.matrix(df[,c("Canopy_cover","BA","AGB","Density_branches","Density_trees", "Mean_height")])
## Get correlation matrix
cor(df_all, method = "kendall")
## Get significance values of the correlations
cor.mtest(df_all)$p
# Conserved forest plots -----------------------------
## Get variables to perform correlation, subsetting data to conserved forest plots
conserved <- df$Forest_type == "conserved"
df_conserved <- as.matrix(df[conserved,c("Canopy_cover","BA","AGB","Density_branches","Density_trees", "Mean_height")])
## Get correlation matrix
cor(df_conserved, method = "kendall")
## Get significance values of the correlations
cor.mtest(df_conserved)$p
# Degraded forest plots --------------------------------
## Get variables to perform correlation, subsetting data to degraded forest plots
degraded <- df$Forest_type == "degraded"
df_degraded <- as.matrix(df[degraded,c("Canopy_cover","BA","AGB","Density_branches","Density_trees", "Mean_height")])
## Get correlation matrix
cor(df_degraded, method = "kendall")
## Get significance values of the correlations
cor.mtest(df_degraded)$p
library(epade)
library(MASS) # Check out for conflict with tidyverse::select
library(tidyverse)
library(rstatix)
library(broom)
df <- read.csv("plots_data.csv", stringsAsFactors = T)
## Change data form wide to long format
df_long <- df %>%
# Indicate column names to use
select(Plot, Forest_type,Canopy_cover, BA, Mean_height, AGB, Mean_height, Density_branches, Density_trees) %>%
# Prepare data: long format. Indicate which columns are going into long format
pivot_longer(cols = c(Canopy_cover, BA, Mean_height, AGB, Mean_height, Density_branches, Density_trees),
names_to = "Attribute",
values_to = "value")
df_long %>%
# Group by Type of forest and Attribute
group_by(Attribute) %>%
# Change Forest_type to numeric variable
mutate_at(vars(Forest_type), as.numeric) %>%
# Wilcoxon test, pipe-friendly
wilcox_test(value ~ Forest_type)
## Define nesting function
## Taken from: https://github.com/tidyverse/tidyr/issues/769#issuecomment-537624093
func_nest <- function(df, vars_to_nest, new_col) {
nest(df, !!new_col := {{ vars_to_nest }})
}
## Logistic regression models
df_long %>%
# Remove columns that are not going to be used
select(-Plot) %>%
# Use func_nest to nest the data for each attribute
func_nest(-Attribute, "data_nest") %>%
# Get the glm fit, get the coefficients of glm (both intercept and slope) and threshold for the glm
mutate(fit = map(data_nest, ~ glm(.$Forest_type ~ .$value, family = "binomial")),
coef_info = map(fit, tidy),
threshold = map(fit, function(x) dose.p(x, p = 0.5)[[1]])) %>%
# Unnest the coefficient and threshold info
unnest(c(coef_info, threshold))
